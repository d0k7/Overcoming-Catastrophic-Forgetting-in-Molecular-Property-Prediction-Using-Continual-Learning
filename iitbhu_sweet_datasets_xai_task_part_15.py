# -*- coding: utf-8 -*-
"""IITBHU SWEET DATASETS XAI Task Part 15

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BE8cNBrmXG7ceeVORiU7RqATBDsVVtJP
"""

!pip install rdkit

"""**UNMASKED DATASETS**

**Canonical to Canonical (C2C) Conversion**
"""

import pandas as pd
from rdkit import Chem
from rdkit.Chem import AllChem

# Load the dataset
data_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/sweet.csv"
df = pd.read_csv(data_path)

# Define function for canonicalization
def canonicalize_smiles(smiles):
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        return Chem.MolToSmiles(mol)
    else:
        return None

# Apply canonicalization to SMILES column
df['Canonical_SMILES'] = df['SMILES'].apply(canonicalize_smiles)

# Remove rows with None values in Canonical_SMILES column
df = df.dropna(subset=['Canonical_SMILES'])

# Save the dataframe with canonicalized SMILES to a new CSV file
c2c_csv_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETUMC2C.csv"
df.to_csv(c2c_csv_path, index=False)

# Now you can use the "C2C.csv" file as input to implement the BERT model for sequence classification.

# Import necessary libraries
import pandas as pd

# Path to the canonicalized dataset
c2c_csv_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETUMC2C.csv"

# Load the canonicalized dataset
df = pd.read_csv(c2c_csv_path)

# Print the shape of the dataframe
print("Shape of the dataset:", df.shape)

# Print the column names of the dataframe
print("Columns in the dataset:", df.columns.tolist())

# Display the first few rows of the dataframe
print("First few rows of the dataset:")
print(df.head())

"""**Randomized to Canonical (R2C) Conversion**"""

import pandas as pd
from rdkit import Chem
import random

# Function to perform R2C transformation
def r2c(smiles):
    # Convert SMILES string to RDKit Mol object
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        # Get the atom indices
        atom_indices = list(range(mol.GetNumAtoms()))
        # Shuffle the atom indices to randomize the molecular structure
        random.shuffle(atom_indices)
        # Reorder the atoms based on the shuffled indices
        mol = Chem.RenumberAtoms(mol, atom_indices)
        # Convert the randomized structure back to canonical form
        canonical_smiles = Chem.MolToSmiles(mol, canonical=True, isomericSmiles=True)
        return canonical_smiles
    else:
        return None

# Load the dataset
data_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/sweet.csv"
df = pd.read_csv(data_path)

# Apply the R2C transformation to the SMILES column
df['Canonical_SMILES'] = df['SMILES'].apply(r2c)

# Drop rows with missing canonical SMILES
df = df.dropna(subset=['Canonical_SMILES'])

# Save the dataframe with Canonical_SMILES to a new CSV file
output_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETUMR2C.csv"
df.to_csv(output_path, index=False)

# Import necessary libraries
import pandas as pd

# Path to the canonicalized dataset
c2c_csv_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETUMR2C.csv"

# Load the canonicalized dataset
df = pd.read_csv(c2c_csv_path)

# Print the shape of the dataframe
print("Shape of the dataset:", df.shape)

# Print the column names of the dataframe
print("Columns in the dataset:", df.columns.tolist())

# Display the first few rows of the dataframe
print("First few rows of the dataset:")
print(df.head())

"""**Enumerated to Canonical (E2C) Conversion**"""

import pandas as pd
from rdkit import Chem
from rdkit.Chem import AllChem

# Load the dataset
data_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/sweet.csv"
df = pd.read_csv(data_path)

# Enumerate SMILES to generate multiple variations
def enumerate_smiles(smiles):
    mol = Chem.MolFromSmiles(smiles)
    enumerated_smiles = []
    if mol:
        enumerated_mol = AllChem.EnumerateStereoisomers(mol)
        for enum_mol in enumerated_mol:
            enumerated_smiles.append(Chem.MolToSmiles(enum_mol, isomericSmiles=True))
    return enumerated_smiles

# Apply the E2C transformation to the SMILES column
df['Canonical_SMILES'] = df['SMILES'].apply(enumerate_smiles)

# Save the canonicalized SMILES into a new CSV file
output_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETUME2C.csv"
df.to_csv(output_path, index=False)

# Import necessary libraries
import pandas as pd

# Path to the canonicalized dataset
c2c_csv_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETUME2C.csv"

# Load the canonicalized dataset
df = pd.read_csv(c2c_csv_path)

# Print the shape of the dataframe
print("Shape of the dataset:", df.shape)

# Print the column names of the dataframe
print("Columns in the dataset:", df.columns.tolist())

# Display the first few rows of the dataframe
print("First few rows of the dataset:")
print(df.head())

"""**MASKED DATASETS: MASKING PART CODE START FROM HERE**

**Masked Canonical to Canonical (MC2C) Conversion**
"""

from rdkit import Chem
import pandas as pd

# Define the MC2C transformation function
def mc2c(smiles):
    # Perform the masking transformation
    try:
        mol = Chem.MolFromSmiles(smiles)
        # Perform masking transformation here
        # For demonstration purposes, let's just return the original SMILES
        masked_smiles = smiles
    except:
        masked_smiles = None

    # After masking, convert the masked structure back to canonical form
    # For demonstration purposes, let's just return the original canonical SMILES
    canonical_smiles = smiles if masked_smiles is None else masked_smiles
    return canonical_smiles

# Load the dataset with SMILES strings
data_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/sweet.csv"
df = pd.read_csv(data_path)

# Apply the MC2C transformation to the SMILES column
df['Canonical_SMILES'] = df['SMILES'].apply(mc2c)

# Save the transformed dataset to a new CSV file
output_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETMC2C.csv"
df.to_csv(output_path, index=False)

# Import necessary libraries
import pandas as pd

# Path to the canonicalized dataset
c2c_csv_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETMC2C.csv"

# Load the canonicalized dataset
df = pd.read_csv(c2c_csv_path)

# Print the shape of the dataframe
print("Shape of the dataset:", df.shape)

# Print the column names of the dataframe
print("Columns in the dataset:", df.columns.tolist())

# Display the first few rows of the dataframe
print("First few rows of the dataset:")
print(df.head())

"""**Masked Randomized to Canonical (MR2C) Conversion**"""

from rdkit import Chem
import pandas as pd
import numpy as np

# Define the MR2C transformation function
def mr2c(smiles):
    try:
        # Convert SMILES string to RDKit molecule object
        mol = Chem.MolFromSmiles(smiles)

        # Masking: For demonstration purposes, let's randomly mask one atom
        if mol is not None:
            atom_indices = list(range(mol.GetNumAtoms()))
            np.random.shuffle(atom_indices)
            masked_atom_index = atom_indices[0]
            mol.GetAtomWithIdx(masked_atom_index).SetAtomicNum(0)  # Mask the atom by setting atomic number to 0

            # Randomization: For demonstration purposes, let's just shuffle the atom order
            np.random.shuffle(atom_indices)
            mol = Chem.RenumberAtoms(mol, atom_indices)

        # Canonicalization: Convert the randomized structure back to canonical form
        canonical_smiles = Chem.MolToSmiles(mol, canonical=True)
    except:
        canonical_smiles = None

    return canonical_smiles

# Load the dataset with SMILES strings
data_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/sweet.csv"
df = pd.read_csv(data_path)

# Apply the MR2C transformation to the SMILES column
df['Canonical_SMILES'] = df['SMILES'].apply(mr2c)

# Drop rows with missing canonical SMILES
df.dropna(subset=['Canonical_SMILES'], inplace=True)

# Save the transformed dataset to a new CSV file
output_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETMR2C.csv"
df.to_csv(output_path, index=False)

print("MR2C transformation completed and saved to:", output_path)

# Import necessary libraries
import pandas as pd

# Path to the canonicalized dataset
c2c_csv_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETMR2C.csv"

# Load the canonicalized dataset
df = pd.read_csv(c2c_csv_path)

# Print the shape of the dataframe
print("Shape of the dataset:", df.shape)

# Print the column names of the dataframe
print("Columns in the dataset:", df.columns.tolist())

# Display the first few rows of the dataframe
print("First few rows of the dataset:")
print(df.head())

"""**Masked Enumerated to Canonical (ME2C) Conversion**"""

from rdkit import Chem
import pandas as pd
import numpy as np

# Define the ME2C transformation function
def me2c(smiles):
    try:
        # Convert SMILES string to RDKit molecule object
        mol = Chem.MolFromSmiles(smiles)

        # Masking: For demonstration purposes, let's randomly mask one atom or bond
        if mol is not None:
            atom_indices = list(range(mol.GetNumAtoms()))
            np.random.shuffle(atom_indices)
            masked_atom_index = atom_indices[0]
            mol.GetAtomWithIdx(masked_atom_index).SetAtomicNum(0)  # Mask the atom by setting atomic number to 0

            # Enumeration: Generate all possible combinations of the masked structure
            # For simplicity, let's just return the original canonical SMILES
            # You can implement a more sophisticated enumeration strategy if needed
            enumerated_smiles = Chem.MolToSmiles(mol, canonical=True)

        # Canonicalization: Convert the enumerated structure back to canonical form
        canonical_smiles = Chem.MolToSmiles(mol, canonical=True)
    except:
        canonical_smiles = None

    return canonical_smiles

# Load the dataset with SMILES strings
data_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/sweet.csv"
df = pd.read_csv(data_path)

# Apply the ME2C transformation to the SMILES column
df['Canonical_SMILES'] = df['SMILES'].apply(me2c)

# Drop rows with missing canonical SMILES
df.dropna(subset=['Canonical_SMILES'], inplace=True)

# Save the transformed dataset to a new CSV file
output_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETME2C.csv"
df.to_csv(output_path, index=False)

print("ME2C transformation completed and saved to:", output_path)

# Import necessary libraries
import pandas as pd

# Path to the canonicalized dataset
c2c_csv_path = "/content/drive/MyDrive/Data for IIT BHU/New XAI Datasets/sweet/SWEETME2C.csv"

# Load the canonicalized dataset
df = pd.read_csv(c2c_csv_path)

# Print the shape of the dataframe
print("Shape of the dataset:", df.shape)

# Print the column names of the dataframe
print("Columns in the dataset:", df.columns.tolist())

# Display the first few rows of the dataframe
print("First few rows of the dataset:")
print(df.head())

